{
    parameters: [
    
    
    //Custom Queries
    //DNS
    { "name": "dns",  "options": {"display": "hidden"}, "defaultValue": "event.type contains 'DNS'" } ,
    { "name": "dns-requirement",   "options": {"display": "hidden"},  "defaultValue": "35" } ,
    
    //DHCP
    { "name": "dhcp", "options": {"display": "hidden"},  "defaultValue": "(dataSource.name='Windows Event Logs' xml contains 'dhcp') OR (logfile contains 'dhcp')"  } ,
    { "name": "dhcp-requirement", "options": {"display": "hidden"}, "defaultValue": "36"} ,
    
    //Firewall
    { "name": "firewall", "options": {"display": "hidden"},  "defaultValue": "logfile contains 'firewall'"  } ,
    { "name": "firewall-requirement", "options": {"display": "hidden"}, "defaultValue": "37"} ,
    
 
    //vars
    { "name": "req_lookup",  options: {display: "hidden"},  defaultValue: "lookup Log, Category, Criticality from m2131.csv by id=id"} ,

  ], 
  graphs: [
    {
      graphStyle: "honeycomb",
      title: "At a Glance",
      honeyCombColor: {
        hover: "#B9E885",
        label: "Green",
        value: "#6DB222"
      },
      honeyCombGroupBy: "",
      honeyCombLinkTo: "",
      honeyCombThresholds: ["0", "1", "2", "10"],
      query: "|left join \nreq = (timestamp = *\n| limit 1000\n| group c = running_count() by timestamp\n| let id = format(\"%d\", c)\n| lookup Log, Category, Criticality from m2131.csv by id=id \n| filter Category = *  AND Category  contains (\"Network Device Infrastructure\")),\n\nall = (\n| union \n(\n     #dns#\n     | group Number_of_Logs = count(), serverHost = array_agg_distinct(endpoint.name, 10)| let id = \"#dns-requirement#\"\n     | #req_lookup#\n),\n(\n     #dhcp#\n     | group Number_of_Logs = count(), serverHost = array_agg_distinct(endpoint.name, 10) | let id = \"#dhcp-requirement#\"\n     | #req_lookup#\n),\n(\n     #firewall#\n     | group Number_of_Logs = count(), serverHost = array_agg_distinct(endpoint.name, 10) | let id = \"#firewall-requirement#\"\n     | #req_lookup#\n)\n\n\n| columns Logs = Number_of_Logs = 'null' ? 0 : Number_of_Logs, Category, Log, type_uid = \"null\",  serverHost\n)\n\non Log, Category\n\n| columns Category, Log, \"Host(s)\" = serverHost, Logs\n\n\n\n",
      layout: {
  h: 14,
  i: "0",
  minH: 3,
  minW: 6,
  w: 30,
  x: 0,
  y: 4
}
    ,
    },
    {
      graphStyle: "",
      title: "Operating System (EDR)",
      query: "| union \n(\n     #dns#\n     | group Number_of_Logs = count(), serverHost = array_agg_distinct(endpoint.name, 10)| let id = \"#dns-requirement#\"\n     | #req_lookup#\n),\n(\n     #dhcp#\n     | group Number_of_Logs = count(), serverHost = array_agg_distinct(endpoint.name, 10) | let id = \"#dhcp-requirement#\"\n     | #req_lookup#\n),\n(\n     #firewall#\n     | group Number_of_Logs = count(), serverHost = array_agg_distinct(endpoint.name, 10) | let id = \"#firewall-requirement#\"\n     | #req_lookup#\n)\n\n| columns Number_of_Logs, Category, Log, type_uid = \"null\", \"Host(s)\" = serverHost",
      showBarsColumn: "false",
      layout: {
  h: 14,
  i: "1",
  minH: 3,
  minW: 6,
  w: 60,
  x: 0,
  y: 18
}
    },
    {
      graphStyle: "markdown",
      title: "Pages",
      layout: {
  h: 4,
  i: "2",
  minH: 3,
  minW: 6,
  w: 60,
  x: 0,
  y: 0
},
      markdown: "### [OCSF](/dashboards/M-21-31%20-%20EL1?startTime=7+d&teamToken=gl0x8x8QTnHZBlSweFJgvg--)&nbsp;&nbsp;&nbsp;&nbsp;**|**&nbsp;&nbsp;&nbsp;&nbsp;[Operating Systems](/dashboards/M-21-31%20-%20EL1%20-%20EDR?teamToken=gl0x8x8QTnHZBlSweFJgvg--&view=edr)&nbsp;&nbsp;&nbsp;&nbsp;**|**&nbsp;&nbsp;&nbsp;&nbsp;[Network Device Infrastructure](/dashboards/M-21-31%20-%20EL1%20-%20Network?teamToken=gl0x8x8QTnHZBlSweFJgvg--)&nbsp;&nbsp;&nbsp;&nbsp;**|**&nbsp;&nbsp;&nbsp;&nbsp;[Cloud](/dashboards/M-21-31%20-%20EL1%20-%20Cloud?teamToken=gl0x8x8QTnHZBlSweFJgvg--)&nbsp;&nbsp;&nbsp;&nbsp;**|**&nbsp;&nbsp;&nbsp;&nbsp;[OCSF Sources](/dashboards/z%20OCSF?startTime=1+h&teamToken=gl0x8x8QTnHZBlSweFJgvg--)\n\n"
    },
    {
      graphStyle: "",
      title: "CISA Requirements (Criticality 0)",
      query: "timestamp = *\n| limit 1000\n| group c = running_count() by timestamp\n| let id = format(\"%d\", c)\n| lookup Log, Category, Criticality from m2131.csv by id=id\n| columns Criticality, Category, Log, id\n| filter Category = *  AND Category  contains \"Network\"\n| columns Criticality, Category, Log\n",
      showBarsColumn: "false",
      layout: {
  h: 14,
  i: "3",
  minH: 3,
  minW: 6,
  w: 30,
  x: 30,
  y: 4
}
    ,
    }
  ]
}
