{
  parameters: [
    
    
    //Custom Queries
    //powershell
    { "name": "powershell",  "options": {"display": "hidden"}, "defaultValue": "indicator.name = 'PowershellExecution' OR src.process.name='powershell.exe'" } ,
    { "name": "powershell-requirement",   "options": {"display": "hidden"},  "defaultValue": "32" } ,
    
    //cmd
    { "name": "cmd", "options": {"display": "hidden"},  "defaultValue": "(indicator.name = 'CmdInteractiveCommand' OR src.process.name = 'cmd.exe')"  } ,
    { "name": "cmd-requirement", "options": {"display": "hidden"}, "defaultValue": "31"} ,
    
    //event process creation
    { "name": "event-process-creation", "options": {"display": "hidden"},  "defaultValue": "event.type = 'Process Creation'"  } ,
    { "name": "event-process-creation-requirement", "options": {"display": "hidden"}, "defaultValue": "25"} ,
    
    //remote login logoff
    { "name": "remote-login-logoff", "options": {"display": "hidden"},  "defaultValue": "event.type in ('Login', 'Logout')"  } ,
    { "name": "remote-login-logoff-requirement", "options": {"display": "hidden"}, "defaultValue": "26"} ,
    
    //os login logoff
    { "name": "os-login-logoff", "options": {"display": "hidden"},  "defaultValue": "event.type in ('Login', 'Logout')"  } ,
    { "name": "os-login-logoff-requirement", "options": {"display": "hidden"}, "defaultValue": "26"} ,
    
    //active network communication
    { "name": "active-network-communication", "options": {"display": "hidden"},  "defaultValue": "event.category = 'ip'"  } ,
    { "name": "active-network-communication-requirement", "options": {"display": "hidden"}, "defaultValue": "30"} ,
    
    //service status changes
    { "name": "service-status-changes", "options": {"display": "hidden"},  "defaultValue": "indicator.name in ('ServiceCreate', 'ServiceStopped', 'ServiceModified')"  } ,
    { "name": "service-status-changes-requirement", "options": {"display": "hidden"}, "defaultValue": "29"} ,
    
    //scheduled task changes
    { "name": "scheduled-task-changes", "options": {"display": "hidden"},  "defaultValue": "event.type = 'Task Update'"  } ,
    { "name": "scheduled-task-changes-requirement", "options": {"display": "hidden"}, "defaultValue": "28"} ,
    
    //WMI events
    { "name": "wmi-events", "options": {"display": "hidden"},  "defaultValue": "indicator.name contains 'wmi'"  } ,
    { "name": "wmi-events-requirement", "options": {"display": "hidden"}, "defaultValue": "33"} 
    
    //OCSF Queries
    
   { "name": "EL Level",   values: [ { label: "EL-1" , value: "0" } ] } ,
    { "name": "IAM",    options: {display: "hidden"},     values: [ { label: "IAM1" , value: "type_uid =*" }, { label: "IAM2" , value: "type_uid =*" } ] } ,
    { "name": "PIM",    options: {display: "hidden"},    values: [ { label: "PIM" , value: "type_uid = * src_user.account_type_id = 2 or user_type_uid = 2" } ] } ,
    { "name": "OS",       options: {display: "hidden"},  values: [ { label: "OS" , value: "type_uid = *" } ] } ,
    { "name": "AWS",  options: {display: "hidden"},  values: [ { label: "AWS" , value: "type_uid = *" } ] } ,
    { "name": "Azure",  options: {display: "hidden"},  values: [ { label: "Azure" , value: "type_uid = *" } ] } ,
    { "name": "GCP",  options: {display: "hidden"},  values: [ { label: "GCP" , value: "type_uid = *" } ] } ,
    
    //vars
    { "name": "req_lookup",  options: {display: "hidden"},  defaultValue: "lookup Log, Category, Criticality from m2131.csv by id=id"} ,

  ], 
graphs : [
  
  
  
    {
      query: "//Identity & Credential Management\n|left join\n\nlookups = (|outer join\n\nm2131 = (timestamp = *\ntimestamp = *\n| limit 1000\n| group c = running_count() by timestamp\n| let id = format(\"%d\", c)\n| lookup Log, Category, Criticality from m2131.csv by id=id\n| columns Category, Log, m2131_id = id, key = id, Criticality\n\n| filter Category = \"Privileged Identity & Credential Management\"\n ),\n\n\nocsf = (timestamp = *\n| limit 1000\n| group c = running_count() by timestamp\n| let id = format(\"%d\", c)\n| lookup log_type,type_uid,user_type_uid,m2131_req_fk from ocsf.csv by id=id\n| columns log_type,type_uid,user_type_uid, ocsf_id = id,key = m2131_req_fk\n| filter log_type = *  )\n\non\n\nkey\n\n| columns Category, Log,type_uid = type_uid+\"\", user_type_uid, ocsf_id, m2131_id\n| filter Category = * \n),\n\nlive_data = (\n\nsrc_user.account_type_id = 2 or user_type_uid = 2\n| let serverHost = serverHost ? serverHost: endpoint.name ? endpoint.name : serverIP\n| group count = count(), serverHost = array_agg_distinct(serverHost), timestamp = any(timestamp) by type_uid=type_uid+\"\"\n| columns type_uid, serverHost, timestamp, count, user_type_uid = \"2\"\n\n)\n\non \n\n\n       type_uid, user_type_uid\n\n| columns Number_of_Logs = count, Category, Log, type_uid, Host = serverHost\n",
      teamEmails: ["11633_426418030212073761@s1.oem", "11633_1@s1.oem"],
      title: "Privileged Identity & Credential Management",
      graphStyle: "",
      showBarsColumn: "false",
      layout: {
  h: 13,
  w: 60,
  x: 0,
  y: 67
}
    },
    {
      graphStyle: "",
      layout: {
  h: 13,
  w: 60,
  x: 0,
  y: 93
},
      query: "//Network Device Infrastructure\n|left join\n\nlookups = (|outer join\n\nm2131 = (timestamp = *\ntimestamp = *\n| limit 1000\n| group c = running_count() by timestamp\n| let id = format(\"%d\", c)\n| lookup Log, Category, Criticality from m2131.csv by id=id\n| columns Category, Log, m2131_id = id, key = id, Criticality\n\n| filter Category = \"Network Device Infrastructure\"\n ),\n\n\nocsf = (timestamp = *\n| limit 1000\n| group c = running_count() by timestamp\n| let id = format(\"%d\", c)\n| lookup log_type,type_uid,user_type_uid,m2131_req_fk from ocsf.csv by id=id\n| columns log_type,type_uid,user_type_uid, ocsf_id = id,key = m2131_req_fk\n| filter log_type = *  )\n\non\n\nkey\n\n| columns Category, Log,type_uid = type_uid+\"\", user_type_uid, ocsf_id, m2131_id\n| filter Category = * \n),\n\nlive_data = (\n\ntype_uid = *\n| let serverHost = serverHost ? serverHost: endpoint.name ? endpoint.name : serverIP\n| group count = count(), serverHost = array_agg_distinct(serverHost), timestamp = any(timestamp) by type_uid=type_uid+\"\"\n| columns type_uid, serverHost, timestamp, count\n\n)\n\non \n\n\n       type_uid\n\n| columns Number_of_Logs = count, Category, Log, type_uid, \"Host(s)\" = serverHost\n",
      showBarsColumn: "false",
      teamEmails: ["11633_426418030212073761@s1.oem", "11633_1@s1.oem"],
      title: "Network Device Infrastructure"
    },
    {
      graphStyle: "",
      layout: {
  h: 13,
  w: 60,
  x: 0,
  y: 54
},
      query: "//Identity & Credential Management\n|left join\n\nlookups = (|outer join\n\nm2131 = (timestamp = *\ntimestamp = * \n| limit 1000\n| group c = running_count() by timestamp\n| let id = format(\"%d\", c)\n| lookup Log, Category, Criticality from m2131.csv by id=id\n| columns Category, Log, m2131_id = id, key = id, Criticality\n\n| filter Category = \"Identity & Credential Management\"\n ),\n\n\nocsf = (timestamp = *\n| limit 1000\n| group c = running_count() by timestamp\n| let id = format(\"%d\", c)\n| lookup log_type,type_uid,user_type_uid,m2131_req_fk from ocsf.csv by id=id\n| columns log_type,type_uid,user_type_uid, ocsf_id = id,key = m2131_req_fk\n| filter log_type = *  )\n\non\n\nkey\n\n| columns Category, Log,type_uid = type_uid+\"\", user_type_uid, ocsf_id, m2131_id\n| filter Category = * \n),\n\nlive_data = (\n\n#IAM#\n| let serverHost = serverHost ? serverHost: endpoint.name ? endpoint.name : serverIP\n| group count = count(), serverHost = array_agg_distinct(serverHost), timestamp = any(timestamp) by type_uid=type_uid+\"\"\n| columns type_uid, serverHost, timestamp, count\n\n)\n\non \n\n\n       type_uid\n\n| columns Number_of_Logs = count, Category, Log, type_uid, \"Host(s)\" = serverHost\n",
      showBarsColumn: "false",
      teamEmails: [],
      title: "Identity & Credential Management"
    },
    {
      graphStyle: "",
      layout: {
  h: 13,
  w: 60,
  x: 0,
  y: 80
},
      query: "//Operating Systems\n|left join\n\nlookups = (|outer join\n\nm2131 = (timestamp = *\ntimestamp = *\n| limit 1000\n| group c = running_count() by timestamp\n| let id = format(\"%d\", c)\n| lookup Log, Category, Criticality from m2131.csv by id=id\n| columns Category, Log, m2131_id = id, key = id, Criticality\n\n| filter Category = \"Operating Systems\"\n ),\n\n\nocsf = (timestamp = *\n| limit 1000\n| group c = running_count() by timestamp\n| let id = format(\"%d\", c)\n| lookup log_type,type_uid,user_type_uid,m2131_req_fk from ocsf.csv by id=id\n| columns log_type,type_uid,user_type_uid, ocsf_id = id,key = m2131_req_fk\n| filter log_type = *  )\n\non\n\nkey\n\n| columns Category, Log,type_uid = type_uid+\"\", user_type_uid, ocsf_id, m2131_id\n| filter Category = * \n),\n\nlive_data = (\n\ntype_uid = *\n| let serverHost = serverHost ? serverHost: endpoint.name ? endpoint.name : serverIP\n| group count = count(), serverHost = array_agg_distinct(serverHost), timestamp = any(timestamp) by type_uid=type_uid+\"\"\n| columns type_uid, serverHost, timestamp, count\n\n)\n\non \n\n\n       type_uid\n\n| columns Number_of_Logs = count, Category, Log, type_uid, \"Host(s)\" = serverHost\n",
      showBarsColumn: "false",
      teamEmails: ["11633_426418030212073761@s1.oem", "11633_1@s1.oem"],
      title: "Operating Systems"
    },
    {
      graphStyle: "",
      layout: {
  h: 13,
  w: 60,
  x: 0,
  y: 106
},
      query: "//Amazon Web Services (AWS)\n|left join\n\nlookups = (|outer join\n\nm2131 = (timestamp = *\ntimestamp = *\n| limit 1000\n| group c = running_count() by timestamp\n| let id = format(\"%d\", c)\n| lookup Log, Category, Criticality from m2131.csv by id=id\n| columns Category, Log, m2131_id = id, key = id, Criticality\n\n| filter Category = \"Amazon Web Services (AWS)\"\n ),\n\n\nocsf = (timestamp = *\n| limit 1000\n| group c = running_count() by timestamp\n| let id = format(\"%d\", c)\n| lookup log_type,type_uid,user_type_uid,m2131_req_fk from ocsf.csv by id=id\n| columns log_type,type_uid,user_type_uid, ocsf_id = id,key = m2131_req_fk\n| filter log_type = *  )\n\non\n\nkey\n\n| columns Category, Log,type_uid = type_uid+\"\", user_type_uid, ocsf_id, m2131_id\n| filter Category = * \n),\n\nlive_data = (\n\ntype_uid = *\n| let serverHost = serverHost ? serverHost: endpoint.name ? endpoint.name : serverIP\n| group count = count(), serverHost = array_agg_distinct(serverHost), timestamp = any(timestamp) by type_uid=type_uid+\"\"\n| columns type_uid, serverHost, timestamp, count\n\n)\n\non \n\n\n       type_uid\n\n| columns Number_of_Logs = count, Category, Log, type_uid, \"Host(s)\" = serverHost\n",
      showBarsColumn: "false",
      teamEmails: ["11633_426418030212073761@s1.oem", "11633_1@s1.oem"],
      title: "Amazon Web Services (AWS)"
    },
    {
      graphStyle: "honeycomb",
      honeyCombColor: {
        hover: "#B9E885",
        label: "Green",
        value: "#6DB222"
      },
      honeyCombLinkTo: "",
      honeyCombThresholds: ["0", "1", "1", "2"],
      layout: {
  h: 11,
  i: "5",
  minH: 3,
  minW: 6,
  w: 30,
  x: 0,
  y: 4
},
      query: "|left join\n\nlookups = (|outer join\n\nm2131 = (timestamp = *\ntimestamp = *\n| limit 1000\n| group c = running_count() by timestamp\n| let id = format(\"%d\", c)\n| lookup Log, Category, Criticality from m2131.csv by id=id\n| columns Category, Log, m2131_id = id, key = id, Criticality\n ),\n\n\nocsf = (timestamp = *\n| limit 1000\n| group c = running_count() by timestamp\n| let id = format(\"%d\", c)\n| lookup log_type,type_uid,user_type_uid,m2131_req_fk from ocsf.csv by id=id\n| columns log_type,type_uid,user_type_uid, ocsf_id = id,key = m2131_req_fk\n| filter log_type = *  )\n\non\n\nkey\n\n| columns Category, Log,type_uid = type_uid+\"\", user_type_uid, ocsf_id, m2131_id\n| filter Category = * \n),\n\nlive_data = (\n\ntype_uid = *\n| let serverHost = serverHost ? serverHost: endpoint.name ? endpoint.name : serverIP\n| group count = count(), serverHost = array_agg_distinct(serverHost), timestamp = any(timestamp) by type_uid=type_uid+\"\"\n| columns type_uid, serverHost, timestamp, count\n\n)\n\non \n\n\n       type_uid\n\n| columns  Category, Log, serverHost, count",
      title: "At a Glance (all OCSF)",
      honeyCombGroupBy: ""
    ,

    },
    
    {
      graphStyle: "markdown",
      layout: {
  h: 22,
  w: 30,
  x: 0,
  y: 32
},
      markdown: "\n\nRecent events, including the SolarWinds incident, underscore the importance of increased government visibility before, during, and after a cybersecurity incident. Information from logs on Federal information systems (for both on-premises systems and connections hosted by third parties, such as cloud services providers (CSPs)) is invaluable in the detection, investigation, and remediation of cyber threats.\n\nExecutive Order 14028, *Improving the Nation's Cybersecurity*, directs decisive action to improve the Federal Government\u2019s investigative and remediation capabilities. This memorandum was developed in accordance with and addresses the requirements in section 8 of the Executive Order for logging, log retention, and log management, with a focus on ensuring centralized access and visibility for the highest-level enterprise security operations center (SOC) of each agency. In addition, this memorandum establishes requirements for agencies to increase the sharing of such information, as needed and appropriate, to accelerate incident response efforts and to enable more effective defense of Federal information and executive branch departments and agencies.\n\n### Purpose\n\nThis guide introduces the M2131 framework, designed to align with the requirements laid out in Executive Order 14028. By providing centralized access and visibility to logs across federal information systems, agencies can bolster their investigative and remediation capabilities. Additionally, this framework emphasizes the importance of information sharing to facilitate faster incident response and enhance overall defense strategies.\n\n### Overview\n\nThe M2131 dashboard outlined in this guide serves as a tool to achieve EL1 compliance, streamlining the identification and fulfillment of all critical items. Leveraging the OCSF standard, the dashboard organizes data into tabs, with the majority of information mapped to the OCSF schema on the second tab. Users can easily navigate and customize the dashboard to suit their specific needs, ensuring comprehensive monitoring and response capabilities.\n",
      title: "Introduction"
    },
    {
      graphStyle: "",
      layout: {
  h: 39,
  w: 30,
  x: 30,
  y: 4
},
      query: "timestamp = *\n| limit 1000\n| group c = running_count() by timestamp\n| let id = format(\"%d\", c)\n| lookup Log, Category, Criticality from m2131.csv by id=id\n| columns Criticality, Category, Log, id\n| filter Category = * \n| columns Criticality, Category, Log\n",
      showBarsColumn: "false",
      title: "CISA Requirements (Criticality 0)"
    },
    {
      graphStyle: "markdown",
      layout: {
  h: 6,
  i: "8",
  minH: 3,
  minW: 6,
  w: 30,
  x: 0,
  y: 26
},
      markdown: "1. **Sentinelone uses the OCSF standard**: Most data mapped to the OCSF schema will be on the first tab.\n2. **Remaining Data**: Custom queries will be on subsequent tabs.\n3. **Customization**: It is easy for you to customize all tabs.",
      title: "How to Use"
    },
    {
      graphStyle: "markdown",
      title: "Pages",
      markdown: "### [OCSF](/dashboards/M-21-31%20-%20EL1?startTime=7+d&teamToken=gl0x8x8QTnHZBlSweFJgvg--)&nbsp;&nbsp;&nbsp;&nbsp;**|**&nbsp;&nbsp;&nbsp;&nbsp;[Operating Systems](/dashboards/M-21-31%20-%20EL1%20-%20EDR?teamToken=gl0x8x8QTnHZBlSweFJgvg--&view=edr)&nbsp;&nbsp;&nbsp;&nbsp;**|**&nbsp;&nbsp;&nbsp;&nbsp;[Network Device Infrastructure](/dashboards/M-21-31%20-%20EL1%20-%20Network?teamToken=gl0x8x8QTnHZBlSweFJgvg--)&nbsp;&nbsp;&nbsp;&nbsp;**|**&nbsp;&nbsp;&nbsp;&nbsp;[Cloud](/dashboards/M-21-31%20-%20EL1%20-%20Cloud?teamToken=gl0x8x8QTnHZBlSweFJgvg--)&nbsp;&nbsp;&nbsp;&nbsp;**|**&nbsp;&nbsp;&nbsp;&nbsp;[OCSF Sources](/dashboards/z%20OCSF?startTime=1+h&teamToken=gl0x8x8QTnHZBlSweFJgvg--)\n\n",
      layout: {
  h: 4,
  i: "9",
  minH: 3,
  minW: 6,
  w: 60,
  x: 0,
  y: 0
}
    }
  ]
options: {},
description: "",
filters: [
]
}
